
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#variables:
  #tfBackendStorageAccountName : ''


# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
    set +e
    if [ -z $(environment) ]; then
    echo "target environment not specified";
    exit 1;
    fi
    echo "environment is:" $(environment)

  displayName: 'Verify that the environment parameter has been supplied to pipeline'


- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Visual Studio Enterprise (ab9276f5-ede2-49b7-8620-bd26f4b38ca1)'
    KeyVaultName: 'spaccess'
    SecretsFilter: '*'
    

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.3'
- task: AzureCLI@1
  inputs:
    azureSubscription: Visual Studio Enterprise (ab9276f5-ede2-49b7-8620-bd26f4b38ca1)
    scriptLocation: 'inlineScript'
    inlineScript: 'terraform version'
  displayName: "Terraform Version"

- script: |
   # az login --service-principal -u $(tf-sp-id) -p $(tf-sp-secret) --tenant $(tf-tenant-id)
     cd $(System.DefaultWorkingDirectory)/Terraform
    
    echo '#######Terraform Init########'
   # terraform init -backend-config="storage_account_name=$(tfBackendStorageAccountName)" -backend-config="container_name=$(tfBackendStorageContainerName)" -backend-config="access_key=$(tf-backend-sa-access-key)" -backend-config="key=$(tfBackendFileName)"
     terraform init
    echo '#######Terraform Plan########'
   #  terraform plan -var="client_id=$(tf-sp-id)" -var="client_secret=$(tf-sp-secret)" -var="tenant_id=$(tf-tenant-id)" 
    terraform plan -out="out.plan"
    echo '#######Terraform Apply########'
     terraform apply out.plan
    
  displayName: 'Terraform Init, Plan and Apply '